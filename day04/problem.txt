# Day 4

## PART ONE

### Problem

Parse an input where each line is information for a card
  Card number
  Winning numbers
  Numbers you have

For each card, determine how many winning numbers you have, then calculate points
  First is worth 1 point, double for each additional

Find the sum of your points for all cards

### Examples

Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11

Card id is to the left of the colon `:`
Winning numbers are before the pipe `|`
Numbers you have are after the pipe `|`
Numbers are separated by spaces, could be multiple
Unclear if a number can appear multiple times in winning numbers or numbers you have (e.g. Card X: 11 11 | 22 22)

### Data Structures

Parse input into array of hashes for each card
  id, winning numbers array, numbers you have array
Transform array of card hashes into array of how-many-winning-numbers-you-had-for-each-card

### Algorithm

main:
  map input lines to card hashes using helper parse_card
  map cards to winning_numbers_you_have arrays
  map arrays to points
  sum

parse_card:
  card, numbers = split on `:`
  id = digits at end of card, convert to int!
  winning, owned = split numbers on `|`
  winning = scan digits
  owned = scan digits
  convert numbers to ints!
  {id, winning, owned}

winning_numbers_owned:
  map numbers owned to those included in winning numbers


numbers_to_points:
  0 if empty, else 2 to the power of: (size of numbers array, minus 1)

  1 => 1 (2**0)
  2 => 2 (2**1)
  3 => 4 (2**2)
  4 => 8 (2**3)

## PART TWO

### Problem

We still need to determine how many winning numbers you have from each card.
We aren't scoring points anymore.
For each winning number you have on a card, you gain an additional instance of that many subsequent cards.
Go from Card 1..end. Process all instances of a card before moving to the next one.

### Examples

Card 1 can only have 1 instance
The number of instances of a card will be determined by the time you process it
  (only previous cards can increase a card's instances)
The input will not lead to trying to add instances of out of bounds cards

### Data Structures

The only data we need is the order of cards, the number of winning numbers you have on a card, and the number of instances of that card.
We could map the output from parse_card to { :winning_owned, :instances (1) } then iterate across indices of array of those

### Algorithm

main:
  parse_card, then parse with owned_and_instances
  for each with index of array of cards:
    number of cards to increment is winning_owned of this card
    increment those cards' instances by instances of this card
    use number of cards to increment as iterator for offset in index in cards array
  map cards to instances and sum

owned_and_instances:
  card to hash of owned_winning_numbers size and instances: 1